/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.8/userguide/building_java_projects.html in the Gradle documentation.
 */

buildscript {
    dependencies {
        // https://github.com/flyway/flyway/issues/3774#issuecomment-1829245496
        classpath(libs.flyway.database.postgresql)
        classpath(libs.jackson.databind)
    }

    configurations['classpath'].resolutionStrategy.eachDependency {
        if (requested.group.startsWith('org.jooq') && requested.name.startsWith('jooq')) {
            useVersion '3.20.1'
        }
    }
}

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    alias(libs.plugins.flyway)
    alias(libs.plugins.jooq)
}

dependencies {
    implementation project(":integration")
    implementation project(":telegram")
    implementation(libs.postgresql)

    jooqGenerator libs.postgresql
}

def env = loadEnvFile()

flyway {
    url = env["CACHE_DB_URL"]
    user = env["CACHE_DB_USER"]
    password = env["CACHE_DB_PASSWORD"]
    locations = ['filesystem:src/main/resources/db/migration/cache']
    cleanDisabled = false
}

sourceSets["main"].java.srcDir("build/generated-sources/jooq")

jooq {
    configurations {
        main {
            generationTool {
                logging = org.jooq.meta.jaxb.Logging.WARN

                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = env["CACHE_DB_URL"]
                    user = env["CACHE_DB_USER"]
                    password = env["CACHE_DB_PASSWORD"]
                }

                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'

                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        inputSchema = 'public'
                    }

                    target {
                        packageName = 'org.example.jooq.generated'
                        directory = 'build/generated-sources/jooq'
                    }
                }
            }
        }
    }
}

tasks.named('generateJooq').configure {
    launcher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(21)
    }
}